( / or / = / > / > / != / <= / >= / ) / . and / mod / - / = - - / | / .. // namespace :: node ( ) // .. // following-sibling :: processing-instruction ( "`UfQ" ) / . / descendant-or-self :: processing-instruction ( '' ) / descendant :: processing-instruction ( '' ) | self ( ) | / | / | / | '~1^My' / . = / div / < - - - ( / ) [ / - / and / <= / <= / >= / < / and / and / <= / ] [ / + / - / > / - / + / + / >= / - / - / > / < / - / != / - / - / != / - / + / + / - / + / >= / and / >= / - / != / > / - / and / + / - / + / + / - / > / = / - / - / + / = / - / - / + / != / - / + / - / = / - / - / + / ] [ / < / - / + / + / + / <= / <= / - / + / - / >= / - / - / - / = / - / - / - / != / >= / >= / + / = / + / + / > / + / + / <= / or / - / <= / - / + / < / != / - / < / <= / - / = / >= / <= / - / + / and / + / - / + / < / + / - / + / + / + / = / + / + / + / >= / + / + / <= / - / <= / + / - / ] / namespace :: processing-instruction ( "" ) / .. | "RX" / parent :: processing-instruction ( '' ) <= - - / | / ancestor-or-self :: * / following :: * / .. // text ( ) // processing-instruction ( "" ) div / mod following-sibling :: * + / - / + / mod / - / mod / + / | preceding-sibling ( ) div / mod - .57 | / | 0. | . / .. | "v[" // .. / .. div / mod - / | .6 | 'EG' // .. / . mod / + / div / | // parent :: processing-instruction ( 'q' ) // . // * / .. / .. / preceding-sibling :: * // .. // @ node ( ) = / != / mod / | / | / | / | / | "" // . != - $ preceding-sibling : text [ / > / + / and / ] * / 