( / and / - / + / > / + / + / ) [ / <= / - / - / < / or / + / + / <= / + / + / + / + / or / + / >= / + / - / or / + / != / >= / - / + / <= / != / = / < / < / - / != / + / = / - / >= / < / = / > / + / + / - / != / ] [ / - / - / - / <= / and / <= / = / + / - / < / != / - / - / or / - / - / + / != / - / > / + / <= / - / = / >= / < / = / < / + / ] // . | e ( ) / .. // @ ᄄ : _ | / . mod following :: node ( ) / .. // .. | / ancestor :: processing-instruction ( "." ) - / .. / . / .. // namespace :: node ( ) != - - / | $ Ã / child :: node ( ) // . // .. | / | $ text / . | / | . // . // .. | 'i' // .. / .. mod / mod / div / | / | 606 mod / + - - / | $ text : node // processing-instruction ( " " ) + - - / | / | .. / namespace :: processing-instruction ( '}' ) div - - - ͹- ( ) / .. // parent :: parent : node / .. | / | @ processing-instruction ( "z" ) / self :: processing-instruction ( "[" ) // . // @ processing-instruction ( '0' ) / .. | . | / | '_s' mod / - / div / div / != - / | "" mod / mod - ',' / . // @ text ( ) * / descendant :: node ( ) / self :: * / . | / | / | '' mod - - . | / | '0v' mod / div / mod / div / <= - - - - - / | / | / | / | // .. // . div / >= - / | "" mod / + / mod / 