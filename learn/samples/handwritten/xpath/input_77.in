- / . | '' / .. | / | . // parent :: processing-instruction ( "{[N" ) // .. | 8 // * | .5 + / div / <= - - / .. // attribute :: * // . mod ancestor-or-self :: comment ( ) // . // .. / . | .. | / | / | .1 / .. | "o" / . + / or / - / != / - / < / mod / + / - / | / | / | '' // . + / + / and ( / != / + / ) [ / + / - / + / and / or / + / < / + / + / + / - / - / >= / or / <= / + / - / >= / + / <= / <= / < / > / + / > / - / != / + / - / - / < / < / <= / + / - / < / != / >= / - / - / and / = / - / - / = / + / + / >= / > / = / >= / - / + / and / - / + / + / - / <= / <= / + / ] [ / + / - / - / ] [ / >= / ] [ / or / = / + / - / < / + / - / < / - / - / + / - / ] [ / ] and - - / .. | node ( ) | / | / .. mod / mod / div - - .3 // . / .. // ancestor :: processing-instruction ( 'Hn8' ) / text ( ) // . // .. mod / | .0 - / | / | / | / | / | / | '' * / div - - - - - - / | .. * / mod - - / | / | "v0Z" mod / > / + / - - - - - - / parent :: self : * / . // @ processing-instruction ( "" ) // . / attribute / @ text ( ) // .. * / - / div - - - - / | . / @ node ( ) | ͳ·- ( ) // ancestor-or-self :: node ( ) / . // parent :: comment ( ) // descendant :: processing-instruction ( ';' ) div / div - - attribute :: comment ( ) | "t" + / div / + ( / + / >= / + / + / = / != / ) // comment ( ) // preceding :: processing-instruction ( 'C0' ) | / | / | 02. <= / 